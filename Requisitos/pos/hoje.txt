




# Project Structure:
MegaSenaConferidor/
├── requirements.txt
├── setup.ps1
├── static/
│   ├── css/
│   │   └── style.css
│   └── js/
│       └── main.js
├── templates/
│   └── index.html
└── app.py


# requirements.txt
flask==2.0.3
Werkzeug==2.0.3
requests==2.26.0
python-dotenv==0.19.0


# app.py
# Valores que podem ser alterados... 

""" MAIN.JS
// Adicione esta validação
    const intervalo = fim - inicio;
    if (intervalo > 100) { //Conferência de no máximo 100 por vez
        const confirmacao = confirm('Para melhor desempenho, recomendamos conferir no máximo 100 concursos por vez. Deseja continuar mesmo assim?');
        if (!confirmacao) {
            return;
        }
    }

// APP.PY
# Ordena as estatísticas de jogos
        jogos_stats_ordenados = sorted(
            [{'numeros': stats['numeros'], 
              'total': stats['total'], 
              'distribuicao': stats['distribuicao']} 
             for stats in jogos_stats.values()],
            key=lambda x: x['total'],
            reverse=True
        )[:10]  # Retorna apenas os 10 mais frequentes
"""

from flask import Flask, render_template, request, jsonify
import requests
from datetime import datetime
import os
import random  # Adicione esta linha

app = Flask(__name__)


def atualizar_estatisticas_jogo(stats, jogo, acertos):
    """Atualiza as estatísticas de um jogo"""
    jogo_key = tuple(sorted(jogo))
    if jogo_key not in stats:
        stats[jogo_key] = {
            'total': 0,
            'distribuicao': {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0},
            'numeros': list(jogo_key)
        }
    stats[jogo_key]['total'] += 1
    stats[jogo_key]['distribuicao'][acertos] += 1
    return stats

API_BASE_URL = "https://loteriascaixa-api.herokuapp.com/api"

def get_latest_result():
    try:
        response = requests.get(f"{API_BASE_URL}/megasena/latest")
        if response.status_code == 200:
            return response.json()
        return None
    except Exception as e:
        print(f"Erro ao buscar último resultado: {str(e)}")
        return None

@app.route('/')
def index():
    latest = get_latest_result()
    ultimo_concurso = latest['concurso'] if latest else 2680
    return render_template('index.html', ultimo_concurso=ultimo_concurso)

@app.route('/gerar_numeros')
def gerar_numeros():
    numeros = random.sample(range(1, 61), 6)
    return jsonify({'numeros': sorted(numeros)})




@app.route('/conferir', methods=['POST'])
def conferir():
    try:
        data = request.get_json()
        inicio = int(data['inicio'])
        fim = int(data['fim'])
        jogos = data['jogos']


        print(f"\nIniciando conferência de {len(jogos)} jogos")
        print(f"Período: concurso {inicio} até {fim}")
        print(f"Jogos recebidos: {jogos}\n")

        resultados = {
            'acertos': [],
            'resumo': {
                'quatro': 0,
                'cinco': 0,
                'seis': 0
            }
        }

        # Inicializa o dicionário de estatísticas
        jogos_stats = {}

        # Verifica cada concurso
        for concurso in range(inicio, fim + 1):
            try:
                print(f"\nVerificando concurso {concurso}:")
                response = requests.get(f"{API_BASE_URL}/megasena/{concurso}", timeout=5)

                # Melhor tratamento de erros HTTP
                if response.status_code == 404:
                    print(f"Concurso {concurso} não encontrado")
                    continue
                elif response.status_code == 429:
                    return jsonify({
                        'error': 'Muitas requisições. Por favor, aguarde alguns minutos e tente novamente.'
                    }), 429
                elif response.status_code != 200:
                    print(f"Erro ao buscar concurso {concurso}: Status {response.status_code}")
                    continue

                # Verifica se é realmente JSON antes de decodificar
                content_type = response.headers.get('content-type', '')
                if 'application/json' not in content_type.lower():
                    print(f"Resposta inesperada do servidor para concurso {concurso}")
                    continue

                try:
                    resultado = response.json()
                except ValueError:
                    print(f"Resposta inválida do servidor para concurso {concurso}")
                    continue

                dezenas = [int(d) for d in resultado['dezenas']]
                print(f"Dezenas sorteadas: {dezenas}")

                # Verifica cada jogo contra este concurso
                for idx, jogo in enumerate(jogos):
                    print(f"\nJogo {idx + 1}: {jogo}")
                    acertos = len(set(jogo) & set(dezenas))
                    print(f"Acertos encontrados: {acertos}")

                    # Registra estatísticas para qualquer acerto
                    if acertos > 0:
                        jogos_stats = atualizar_estatisticas_jogo(jogos_stats, jogo, acertos)

                    if acertos >= 4:
                        premio = 0
                        for premiacao in resultado['premiacoes']:
                            if ((acertos == 6 and premiacao['descricao'] == '6 acertos') or
                                (acertos == 5 and premiacao['descricao'] == '5 acertos') or
                                (acertos == 4 and premiacao['descricao'] == '4 acertos')):
                                premio = premiacao['valorPremio']
                                break

                        if acertos == 4:
                            resultados['resumo']['quatro'] += 1
                        elif acertos == 5:
                            resultados['resumo']['cinco'] += 1
                        elif acertos == 6:
                            resultados['resumo']['seis'] += 1

                        resultados['acertos'].append({
                            'concurso': resultado['concurso'],
                            'data': resultado['data'],
                            'local': resultado.get('local', ''),
                            'numeros_sorteados': dezenas,
                            'seus_numeros': jogo,
                            'acertos': acertos,
                            'premio': premio
                        })
                        print(f"Prêmio encontrado! {acertos} acertos")

            except requests.exceptions.Timeout:
                print(f"Timeout ao buscar concurso {concurso}")
                continue
            except requests.exceptions.RequestException as e:
                print(f"Erro de rede ao buscar concurso {concurso}: {str(e)}")
                continue
            except Exception as e:
                print(f"Erro ao processar concurso {concurso}: {str(e)}")
                continue

        # Ordena as estatísticas de jogos
        jogos_stats_ordenados = sorted(
            [{'numeros': stats['numeros'], 
              'total': stats['total'], 
              'distribuicao': stats['distribuicao']} 
             for stats in jogos_stats.values()],
            key=lambda x: x['total'],
            reverse=True
        )[:10]  # Retorna apenas os 10 mais frequentes

        # Modifica o retorno para incluir jogos_stats
        if not resultados['acertos']:
            return jsonify({
                'message': 'Nenhum prêmio encontrado nos concursos verificados',
                'resumo': resultados['resumo'],
                'jogos_stats': jogos_stats_ordenados
            }), 200

        return jsonify({
            'acertos': resultados['acertos'],
            'resumo': resultados['resumo'],
            'jogos_stats': jogos_stats_ordenados
        })

    except Exception as e:
        print(f"Erro geral: {str(e)}")
        return jsonify({'error': str(e)}), 500


# Adicione esta função ao seu app.py
@app.route('/processar_arquivo', methods=['POST'])
def processar_arquivo():
    if 'file' not in request.files:
        return jsonify({'error': 'Nenhum arquivo enviado'}), 400
        
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'Nenhum arquivo selecionado'}), 400

    try:
        # Lê o conteúdo do arquivo
        content = file.read()
        jogos = []
        
        # Tenta processar como texto primeiro
        try:
            # Decodifica o conteúdo como texto
            text_content = content.decode('utf-8')
            lines = text_content.strip().split('\n')
            
            for line in lines:
                # Remove espaços extras e divide os números
                numbers = [int(n) for n in line.strip().split() if n.strip().isdigit()]
                
                # Valida os números
                if (len(numbers) == 6 and 
                    all(1 <= n <= 60 for n in numbers) and 
                    len(set(numbers)) == 6):
                    jogos.append(sorted(numbers))
                    
        except Exception as e:
            print(f"Erro ao processar como texto: {str(e)}")
            
            # Se falhou como texto, tenta processar como Excel
            try:
                # Converte o conteúdo para DataFrame
                df = pd.read_excel(content)
                
                for _, row in df.iterrows():
                    # Pega os primeiros 6 valores numéricos da linha
                    numbers = [int(n) for n in row.values[:6] if isinstance(n, (int, float)) and 1 <= n <= 60]
                    
                    if len(numbers) == 6 and len(set(numbers)) == 6:
                        jogos.append(sorted(numbers))
                        
            except Exception as excel_error:
                print(f"Erro ao processar como Excel: {str(excel_error)}")
                
        if not jogos:
            return jsonify({'error': 'Nenhum jogo válido encontrado no arquivo'}), 400
            
        return jsonify({'jogos': jogos})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500


"""
if __name__ == '__main__':
     app.run(debug=True)
"""


     # Agora a parte de configuração da porta
if __name__ == '__main__':
     port = int(os.environ.get("PORT", 5000))  # Obtém a porta do ambiente ou usa 5000 como padrão
     app.run(host="0.0.0.0", port=port)  # Inicia o servidor Flask na porta correta

// Variáveis globais
const jogosIncluidos = [];
const jogosSelecionados = new Set();
let conferenciaCancelada = false;

// Função para atualizar o contador e mensagem
function atualizarContadorJogos() {
    const quantidade = jogosIncluidos.length;
    const contadorElement = document.getElementById('contador-jogos');
    if (contadorElement) {
        contadorElement.textContent = quantidade;
    }

    // Atualiza o título com singular/plural
    const tituloJogos = document.querySelector('.jogos-incluidos h3');
    if (tituloJogos) {
        tituloJogos.textContent = `Jogos Incluídos (${quantidade} ${quantidade === 1 ? 'jogo' : 'jogos'})`;
    }
}

// Função para formatar mensagens de jogos
function formatarMensagemJogos(quantidade, acao) {
    if (acao === 'incluir') {
        return `${quantidade} jogo${quantidade === 1 ? ' foi incluído' : 's foram incluídos'} com sucesso!`;
    } else if (acao === 'remover') {
        return `${quantidade} jogo${quantidade === 1 ? ' foi removido' : 's foram removidos'} com sucesso!`;
    }
    return '';
}

// Função principal - Inicialização do documento
document.addEventListener('DOMContentLoaded', function() {
    setupDragAndDrop();
    const numeros = document.querySelectorAll('.numero');
    const limparBtn = document.getElementById('limpar');
    const sugestaoBtn = document.getElementById('sugestao');
    const conferirBtn = document.getElementById('conferir');
    const incluirBtn = document.getElementById('incluir');
    const listaJogos = document.getElementById('lista-jogos');
    const overlay = document.getElementById('overlay');
    const numerosSelecionados = new Set();


    // Adicione o evento para o botão de cancelar
    // O botão de cancelar conferência precisa ser verificado se existe antes de adicionar o evento:
    const btnCancelarConferencia = document.getElementById('btn-cancelar-conferencia');
    if (btnCancelarConferencia) {
        btnCancelarConferencia.addEventListener('click', () => {
            conferenciaCancelada = true;
            overlay.style.display = 'none';
        });
    }
   /* document.getElementById('btn-cancelar-conferencia').addEventListener('click', () => {
        conferenciaCancelada = true;
        overlay.style.display = 'none';
    });
   */

    // Adiciona eventos para os novos botões
    document.getElementById('btn-limpar-todos').addEventListener('click', limparTodosJogos);
    document.getElementById('btn-remover-selecionados').addEventListener('click', removerJogosSelecionados);

    // Inicializa o contador
    atualizarContadorJogos();

    // Funcionalidade de seleção de números
    numeros.forEach(numero => {
        numero.addEventListener('click', () => {
            const num = parseInt(numero.dataset.numero);
            if (numero.classList.contains('selecionado')) {
                numero.classList.remove('selecionado');
                numerosSelecionados.delete(num);
            } else if (numerosSelecionados.size < 6) {
                numero.classList.add('selecionado');
                numerosSelecionados.add(num);
            }
        });
    });

    // Botão Limpar
    limparBtn.addEventListener('click', () => {
        numeros.forEach(numero => numero.classList.remove('selecionado'));
        numerosSelecionados.clear();
    });

    // Botão Sugestão
    sugestaoBtn.addEventListener('click', async () => {
        const response = await fetch('/gerar_numeros');
        const data = await response.json();

        limparBtn.click();
        data.numeros.forEach(num => {
            const numero = document.querySelector(`[data-numero="${num}"]`);
            numero.classList.add('selecionado');
            numerosSelecionados.add(num);
        });
    });

    // Botão Incluir
    incluirBtn.addEventListener('click', () => {
        if (numerosSelecionados.size !== 6) {
            alert('Selecione 6 números antes de incluir o jogo!');
            return;
        }

        const numerosArray = Array.from(numerosSelecionados).sort((a, b) => a - b);
        jogosIncluidos.push(numerosArray);
        adicionarJogoNaLista(numerosArray);
        atualizarContadorJogos();
        alert('1 jogo foi incluído com sucesso!');
        limparBtn.click();
    });

   // Botão Conferir
conferirBtn.addEventListener('click', async () => {
    if (jogosIncluidos.length === 0) {
        alert('Inclua pelo menos um jogo antes de conferir!');
        return;
    }

    const inicio = document.getElementById('inicio').value;
    const fim = document.getElementById('fim').value;

    if (!inicio || !fim || parseInt(inicio) > parseInt(fim)) {
        alert('Verifique os números dos concursos!');
        return;
    }

    // Adicione esta validação
    const intervalo = fim - inicio;
    if (intervalo > 100) { //Conferência de no máximo 100 por vez
        const confirmacao = confirm('Para melhor desempenho, recomendamos conferir no máximo 100 concursos por vez. Deseja continuar mesmo assim?');
        if (!confirmacao) {
            return;
        }
    }


    overlay.style.display = 'flex';
    document.querySelector('.progress-text').textContent = 'Conferindo jogos...';

    conferenciaCancelada = false;

    try {
        const response = await fetch('/conferir', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                inicio: parseInt(inicio),
                fim: parseInt(fim),
                jogos: jogosIncluidos
            })
        });

        // Novo trecho de tratamento da resposta (adicionado do código2)
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao conferir jogos');
        }

        const data = await response.json();

        if (conferenciaCancelada) {
            return;
        }

        if (data.error) {
            throw new Error(data.error);
        }

        if (data.message) {
            alert(data.message);
            return;
        }

        // Atualizar contagens
        document.getElementById('quatro-acertos').textContent = data.resumo.quatro;
        document.getElementById('cinco-acertos').textContent = data.resumo.cinco;
        document.getElementById('seis-acertos').textContent = data.resumo.seis;

        // Atualizar valores em reais
        let valorQuadra = 0, valorQuina = 0, valorSena = 0;
        let temQuadra = false, temQuina = false, temSena = false;

        if (data.acertos) {
            data.acertos.forEach(resultado => {
                if (resultado.acertos === 4) {
                    valorQuadra += resultado.premio;
                    temQuadra = true;
                }
                if (resultado.acertos === 5) {
                    valorQuina += resultado.premio;
                    temQuina = true;
                }
                if (resultado.acertos === 6) {
                    valorSena += resultado.premio;
                    temSena = true;
                }
            });
        }

        // Atualiza os valores nos cartões
        document.getElementById('quatro-valor').textContent = temQuadra && valorQuadra > 0 ? 
        `R$ ${valorQuadra.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : 
        'Não houve ganhadores';

        document.getElementById('cinco-valor').textContent = temQuina && valorQuina > 0 ? 
        `R$ ${valorQuina.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : 
        'Não houve ganhadores';

        document.getElementById('seis-valor').textContent = temSena && valorSena > 0 ? 
        `R$ ${valorSena.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : 
        'Não houve ganhadores';

        // Atualizar detalhes visuais
        const detalhesDiv = document.getElementById('detalhes-resultados');
        detalhesDiv.innerHTML = '';

        const tabelaBody = document.getElementById('tabela-resultados');
        tabelaBody.innerHTML = ''; // Limpa a tabela

        // Processamento dos resultados
        if (data.acertos && data.acertos.length > 0) {
            data.acertos.forEach(resultado => {
                // Adicionar na seção de detalhes
                const resultadoDiv = document.createElement('div');
                resultadoDiv.className = 'resultado-item';
                resultadoDiv.innerHTML = `
                    <div class="resultado-header">
                        <h3>Concurso ${resultado.concurso} - ${resultado.data}</h3>
                        <p>${resultado.local || ''}</p>
                    </div>
                    <div class="resultado-numeros">
                        <div class="numeros-sorteados">
                            <h4>Números Sorteados:</h4>
                            <div class="numeros-lista">
                                ${resultado.numeros_sorteados
                                    .sort((a, b) => a - b)
                                    .map(n => `<span class="numero-sorteado">${String(n).padStart(2, '0')}</span>`)
                                    .join(' ')}
                            </div>
                        </div>
                        <div class="seu-jogo">
                            <h4>Seu Jogo:</h4>
                            <div class="numeros-lista">
                                ${resultado.seus_numeros
                                    .sort((a, b) => a - b)
                                    .map(n => `<span class="numero-jogado ${resultado.numeros_sorteados.includes(n) ? 'acerto' : ''}">${String(n).padStart(2, '0')}</span>`)
                                    .join(' ')}
                            </div>
                        </div>
                        <div class="resultado-info">
                            <p class="acertos-info">Acertos: <strong>${resultado.acertos}</strong></p>
                            ${resultado.premio > 0 ? 
                                `<p class="premio-info">Prêmio: <strong>R$ ${resultado.premio.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</strong></p>` 
                                : ''}
                        </div>
                    </div>
                `;
                detalhesDiv.appendChild(resultadoDiv);

                // Adicionar na tabela
                const row = document.createElement('tr');
                const numerosSorteados = resultado.numeros_sorteados
                    .sort((a, b) => a - b)
                    .map(n => `<span class="numero-tabela">${String(n).padStart(2, '0')}</span>`)
                    .join('');
                const seusNumeros = resultado.seus_numeros
                    .sort((a, b) => a - b)
                    .map(n => `<span class="numero-tabela ${resultado.numeros_sorteados.includes(n) ? 'acerto' : ''}">${String(n).padStart(2, '0')}</span>`)
                    .join('');
                const premioText = resultado.premio > 0 
                    ? `R$ ${resultado.premio.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` 
                    : 'Não houve ganhadores';

                row.innerHTML = `
                    <td>${resultado.concurso}</td>
                    <td>${resultado.data}</td>
                    <td>${resultado.local || '-'}</td>
                    <td><div class="numeros-tabela">${numerosSorteados}</div></td>
                    <td><div class="numeros-tabela">${seusNumeros}</div></td>
                    <td>${resultado.acertos}</td>
                    <td>${premioText}</td>
                    <td>${resultado.premio > 0 ? 'Premiado' : 'Acumulado'}</td>
                `;
                tabelaBody.appendChild(row);
            });
        } else {
            detalhesDiv.innerHTML = '<p class="sem-resultados">Nenhum prêmio encontrado para os jogos conferidos.</p>';
        }

        // Atualização da tabela de jogos sorteados
        if (data.jogos_stats) {
            console.log('Dados recebidos para tabela de jogos mais sorteados:', data.jogos_stats);
            atualizarTabelaJogosSorteados(data.jogos_stats);
        }

        // Confirmação para limpar jogos
        if (confirm('Deseja limpar os jogos conferidos?')) {
            limparTodosJogos();
        }

    } catch (error) {
        console.error('Erro detalhado:', error);
        // Tratamento adicional para mensagens de erro (adicionado do código2)
        if (error.message.includes('<!DOCTYPE')) {
            alert('O serviço está temporariamente indisponível. Por favor, tente novamente mais tarde ou reduza o intervalo de concursos.');
        } else {
            alert(error.message);
        }
    } finally {
        overlay.style.display = 'none';
    }
});
 
// Funções de Drag and Drop
function setupDragAndDrop() {
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('file-input');

    dropZone.onclick = () => fileInput.click();

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults);
    });

    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, () => {
            dropZone.classList.add('dragover');
        });
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, () => {
            dropZone.classList.remove('dragover');
        });
    });

    dropZone.addEventListener('drop', handleDrop);
    fileInput.addEventListener('change', handleFileSelect);
}

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

async function handleDrop(e) {
    const file = e.dataTransfer.files[0];
    await processFile(file);
}

async function handleFileSelect(e) {
    const file = e.target.files[0];
    await processFile(file);
}

async function processFile(file) {
    if (!file) return;

    const dropZone = document.getElementById('drop-zone');
    dropZone.classList.add('processing');

    try {
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('/processar_arquivo', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.error) {
            throw new Error(data.error);
        }

        if (data.jogos && data.jogos.length > 0) {
            const jogosAtuais = new Set(jogosIncluidos.map(j => JSON.stringify(j)));
            let jogosNovos = 0;

            data.jogos.forEach(jogo => {
                const jogoStr = JSON.stringify(jogo);
                if (!jogosAtuais.has(jogoStr)) {
                    jogosIncluidos.push(jogo);
                    adicionarJogoNaLista(jogo);
                    jogosAtuais.add(jogoStr);
                    jogosNovos++;
                }
            });

            atualizarContadorJogos();
            alert(formatarMensagemJogos(jogosNovos, 'incluir'));

        } else {
            alert('Nenhum jogo válido encontrado no arquivo');
        }

    } catch (error) {
        console.error('Erro:', error);
        alert(`Erro ao processar arquivo: ${error.message}`);
    } finally {
        dropZone.classList.remove('processing');
    }
}

// Função para adicionar jogo na lista
function adicionarJogoNaLista(jogo) {
    const jogoItem = document.createElement('div');
    jogoItem.className = 'jogo-item';

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.className = 'jogo-checkbox';
    checkbox.onclick = (e) => {
        const jogoStr = JSON.stringify(jogo);
        if (e.target.checked) {
            jogosSelecionados.add(jogoStr);
            jogoItem.classList.add('selecionado');
        } else {
            jogosSelecionados.delete(jogoStr);
            jogoItem.classList.remove('selecionado');
        }
        atualizarBotoesSeleção();
    };

    const jogoNumeros = document.createElement('div');
    jogoNumeros.className = 'jogo-numeros';

    jogo.forEach(num => {
        const numeroSpan = document.createElement('span');
        numeroSpan.className = 'jogo-numero';
        numeroSpan.textContent = String(num).padStart(2, '0');
        jogoNumeros.appendChild(numeroSpan);
    });

    const btnRemover = document.createElement('button');
    btnRemover.className = 'btn-remover';
    btnRemover.textContent = 'Remover';
    btnRemover.onclick = () => removerJogo(jogo, jogoItem);

    jogoItem.appendChild(checkbox);
    jogoItem.appendChild(jogoNumeros);
    jogoItem.appendChild(btnRemover);
    document.getElementById('lista-jogos').appendChild(jogoItem);
}

// Função para remover jogo
function removerJogo(jogo, jogoItem) {
    const index = jogosIncluidos.findIndex(j =>
        JSON.stringify(j) === JSON.stringify(jogo)
    );
    if (index !== -1) {
        jogosIncluidos.splice(index, 1);
        jogosSelecionados.delete(JSON.stringify(jogo));
        jogoItem.remove();
        atualizarBotoesSeleção();
        atualizarContadorJogos();
        alert(formatarMensagemJogos(1, 'remover'));
    }
}

// Função para limpar todos os jogos
function limparTodosJogos() {
    const quantidadeAtual = jogosIncluidos.length;
    if (quantidadeAtual === 0) {
        alert('Não há jogos para remover');
        return;
    }

    if (confirm('Tem certeza que deseja remover todos os jogos?')) {
        jogosIncluidos.length = 0;
        jogosSelecionados.clear();
        document.getElementById('lista-jogos').innerHTML = '';
        atualizarBotoesSeleção();
        atualizarContadorJogos();
        alert(formatarMensagemJogos(quantidadeAtual, 'remover'));
    }
}

// Função para remover jogos selecionados
function removerJogosSelecionados() {
    if (jogosSelecionados.size === 0) {
        alert('Selecione pelo menos um jogo para remover');
        return;
    }

    const quantidadeRemover = jogosSelecionados.size;
    if (confirm(`Deseja remover ${quantidadeRemover} jogo${quantidadeRemover === 1 ? '' : 's'} selecionado${quantidadeRemover === 1 ? '' : 's'}?`)) {
        jogosSelecionados.forEach(jogoStr => {
            const jogo = JSON.parse(jogoStr);
            const index = jogosIncluidos.findIndex(j =>
                JSON.stringify(j) === jogoStr
            );
            if (index !== -1) {
                // Errado
                //jogosIncluidos.splice(index,jogosIncluidos.splice(index, 1));

                // Correto
                jogosIncluidos.splice(index, 1);
            }
        });

        document.querySelectorAll('.jogo-checkbox:checked').forEach(checkbox => {
            checkbox.closest('.jogo-item').remove();
        });

        jogosSelecionados.clear();
        atualizarBotoesSeleção();
        atualizarContadorJogos();
        alert(formatarMensagemJogos(quantidadeRemover, 'remover'));
    }
}

// Função para atualizar botões de seleção
function atualizarBotoesSeleção() {
    const removerSelecionadosBtn = document.getElementById('btn-remover-selecionados');
    if (removerSelecionadosBtn) {
        removerSelecionadosBtn.disabled = jogosSelecionados.size === 0;
    }
}
function atualizarTabelaJogosSorteados(jogos_stats) {
    const tbody = document.querySelector('#tabela-jogos-sorteados tbody');
    tbody.innerHTML = '';

    jogos_stats.forEach(jogo => {
        const tr = document.createElement('tr');
        
        // Coluna do jogo
        const tdJogo = document.createElement('td');
        tdJogo.innerHTML = `<div class="numeros-tabela">
            ${jogo.numeros.map(n => 
                `<span class="numero-tabela">${String(n).padStart(2, '0')}</span>`
            ).join('')}
        </div>`;
        
        // Coluna do total
        const tdTotal = document.createElement('td');
        tdTotal.textContent = `${jogo.total} vezes`;
        
        // Coluna da distribuição
        const tdDistribuicao = document.createElement('td');
        const distribuicao = [];
        for (let i = 1; i <= 6; i++) {
            if (jogo.distribuicao[i] > 0) {
                distribuicao.push(
                    `<span class="distribuicao-badge">
                        ${i} ponto${i !== 1 ? 's' : ''}: ${jogo.distribuicao[i]} vez${jogo.distribuicao[i] !== 1 ? 'es' : ''}
                    </span>`
                );
            }
        }
        tdDistribuicao.innerHTML = distribuicao.join(' ');
        
        tr.appendChild(tdJogo);
        tr.appendChild(tdTotal);
        tr.appendChild(tdDistribuicao);
        tbody.appendChild(tr);
    });
}

});
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MegaSena Conferidor</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Conferidor MegaSena</h1>
        
        <div class="volante">
            <h2>Selecione 6 números</h2>
            <div class="numeros">
                {% for i in range(1, 61) %}
                    <button type="button" class="numero" data-numero="{{ i }}">{{ '%02d' % i }}</button>
                {% endfor %}
            </div>
        </div>

        <!--# Adicione este HTML após a div do volante-->
        <div class="drop-zone" id="drop-zone">
            <div class="drop-zone-content">
                <p>Arraste e solte seu arquivo aqui ou clique para selecionar</p>
                <p class="drop-zone-hint">Arquivos .txt ou .xlsx</p>
                <input type="file" id="file-input" accept=".txt,.xlsx" hidden>
            </div>
        </div>

        <div class="controles">
            <div class="input-group">
                <label for="inicio">Concurso Inicial:</label>
                <input type="number" id="inicio" min="1">
            </div>
            <div class="input-group">
                <label for="fim">Concurso Final:</label>
                <input type="number" id="fim" min="1" value="{{ ultimo_concurso }}">
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="somente-premiados">
                <label for="somente-premiados">Somente premiados</label>
            </div>
        </div>

        <div class="acoes">
            <button id="incluir" class="btn btn-azul">Incluir Jogo</button>
            <button id="limpar" class="btn btn-vermelho">Limpar</button>
            <button id="sugestao" class="btn btn-roxo">Palpite</button>
            <button id="conferir" class="btn btn-verde">Conferir</button>
        </div>
        <div class="jogos-incluidos">
            <h3>Jogos Incluídos (<span id="contador-jogos">0</span> jogos)</h3>
            <div id="lista-jogos" class="lista-jogos"></div>
        </div>

         <!-- Elementos adicionados conforme CODIGO-2 -->
         <div class="acoes-jogos">
            <button id="btn-remover-selecionados" class="btn-acao" disabled>
                Remover Selecionados
            </button>
            <button id="btn-limpar-todos" class="btn-acao">
                Limpar Todos
            </button>
        </div>

        <!--Caixa que aparece quando o botão conferir é clicado-->
        <div id="overlay" class="overlay" style="display: none;">
            <div class="progress">
                <div class="progress-bar"></div>
                <div class="progress-text">Conferindo jogos...</div>
                <button id="btn-cancelar-conferencia" class="btn-cancelar">Cancelar Conferência</button>
            </div>
        </div>


        <div class="resultados">
            <h2>Resumo de acertos</h2>
            <div class="cards">
                <div class="card">
                    <h3>4 Acertos</h3>
                    <p class="contagem" id="quatro-acertos">0</p>
                    <p class="valor-premio" id="quatro-valor">R$ 0,00</p>
                </div>
                <div class="card">
                    <h3>5 Acertos</h3>
                    <p class="contagem" id="cinco-acertos">0</p>
                    <p class="valor-premio" id="cinco-valor">R$ 0,00</p>
                </div>
                <div class="card">
                    <h3>6 Acertos</h3>
                    <p class="contagem" id="seis-acertos">0</p>
                    <p class="valor-premio" id="seis-valor">R$ 0,00</p>
                </div>
            </div>
            <div id="detalhes-resultados" class="detalhes-resultados"></div>

            <!--TABELA DE RESUMO DOS RESULTADOS-->
            <div class="tabela-resumo">
                <h2>Resumo dos Jogos Premiados</h2>
                <div class="tabela-container">
                    <table class="tabela-premios">
                        <thead>
                            <tr>
                                <th>Concurso</th>
                                <th>Data</th>
                                <th>Local</th>
                                <th>Números Sorteados</th>
                                <th>Seu Jogo</th>
                                <th>Acertos</th>
                                <th>Prêmio</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="tabela-resultados">
                            <!-- Será preenchido via JavaScript -->
                        </tbody>
                        <tfoot id="tabela-totais">
                            <tr>
                                <td colspan="6"><strong>Total de Prêmios</strong></td>
                                <td colspan="2" class="total-premios"></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <!-- Adicionar após a div tabela-resumo para trazer a tabela Jogos Mais Sorteados-->
            <div class="jogos-mais-sorteados">
                <h2>Jogos Mais Sorteados</h2>
                <div class="tabela-container">
                    <table class="tabela-premios" id="tabela-jogos-sorteados">
                        <thead>
                            <tr>
                                <th>Meu Jogo</th>
                                <th>Total de Acertos</th>
                                <th>Distribuição</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>
:root {
    --primary-color: #008751;
    --secondary-color: #005c36;
    --danger-color: #dc3545;
    --success-color: #28a745;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    padding: 20px;
    background-color: #f4f4f4;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.volante {
    margin: 20px 0;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
    text-align: center;
}

.volante h2 {
    color: #495057;
    margin-bottom: 20px;
    font-size: 1.2rem;
}

.numeros {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    gap: 8px;
    max-width: 800px;
    margin: 0 auto;
    padding: 15px;
}

.numero {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid #ced4da;
    background-color: white;
    color: #495057;
    font-weight: bold;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    margin: 0 auto;
}

.numero:hover {
    background-color: #e9ecef;
    border-color: #adb5bd;
}

.numero.selecionado {
    background-color: #28a745;
    color: white;
    border-color: #28a745;
}

/* Área de Drag and Drop Atualizada */
.drop-zone {
    width: 100%;
    max-width: 800px;
    height: 180px;
    margin: 20px auto;
    padding: 25px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: 1.2em;
    color: #008751;
    border: 3px dashed #008751;
    border-radius: 12px;
    background-color: rgba(0, 135, 81, 0.05);
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.drop-zone:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 135, 81, 0.2);
    background-color: rgba(0, 135, 81, 0.1);
}

.drop-zone.dragover {
    background-color: rgba(40, 167, 69, 0.15);
    border-color: #28a745;
    transform: scale(1.02);
    box-shadow: 0 6px 16px rgba(40, 167, 69, 0.25);
}

.drop-zone.dragover .drop-zone-content {
    transform: scale(1.05);
}

.drop-zone-content {
    transition: transform 0.3s ease;
}

.drop-zone-content p {
    margin: 0;
    color: #008751;
    font-weight: 500;
}

.drop-zone-hint {
    font-size: 0.9em;
    color: #666;
    margin-top: 10px;
    opacity: 0.8;
}

.drop-zone.processing {
    animation: pulse 2s infinite;
    pointer-events: none;
    background-color: rgba(0, 135, 81, 0.1);
}

.drop-zone.processing .drop-zone-content {
    opacity: 0.5;
}

.drop-zone.processing::after {
    content: "Processando...";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-weight: bold;
    color: #008751;
    z-index: 2;
}

.drop-zone::before {
    content: "⬆️";
    font-size: 2em;
    margin-bottom: 10px;
    display: block;
    transition: transform 0.3s ease;
}

.drop-zone.dragover::before {
    transform: scale(1.2) translateY(-5px);
}

/* Continuação dos estilos existentes */
.controles {
    display: flex;
    gap: 20px;
    margin: 20px 0;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
    align-items: center;
}

.input-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.input-group label {
    font-weight: bold;
    color: #495057;
}

.input-group input {
    padding: 8px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    width: 120px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    gap: 5px;
}

.acoes {
    display: flex;
    gap: 10px;
    margin: 20px 0;
    justify-content: center;
}

.btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s ease;
}

.btn:hover {
    opacity: 0.9;
    transform: translateY(-1px);
}

.btn-vermelho {
    background-color: var(--danger-color);
    color: white;
}

.btn-azul {
    background-color: #007bff; 
    color: white;
}

.btn-roxo {
    background-color: #6f42c1;
    color: white;
}

.btn-verde {
    background-color: var(--success-color);
    color: white;
}

.cards {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    margin-top: 20px;
}

.card {
    padding: 20px;
    border-radius: 8px;
    background-color: #f8f9fa;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.card h3 {
    color: #495057;
    margin-bottom: 10px;
}

.contagem {
    font-size: 24px;
    font-weight: bold;
    color: var(--primary-color);
}

.lista-jogos {
    margin-top: 20px;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 10px;
    min-height: 100px;
    background-color: #fff;
}

.jogo-item {
    background-color: #f8f9fa;
    padding: 10px;
    margin: 5px 0;
    border-radius: 4px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.jogo-numeros {
    display: flex;
    gap: 5px;
}

.jogo-numero {
    background-color: var(--primary-color);
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: bold;
}

.btn-remover {
    background-color: var(--danger-color);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 12px;
}

.btn-remover:hover {
    opacity: 0.9;
}

.overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(5px);
}

.progress {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    width: 300px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.progress-bar {
    height: 6px;
    background-color: var(--primary-color);
    border-radius: 3px;
    margin: 10px 0;
    position: relative;
    overflow: hidden;
}

.progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.4),
        transparent
    );
    animation: shimmer 1s infinite;
}

.progress-text {
    margin-top: 10px;
    color: #495057;
    font-weight: 500;
}

.detalhes-resultados {
    margin-top: 20px;
}

@keyframes shimmer {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(0, 135, 81, 0.4);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(0, 135, 81, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(0, 135, 81, 0);
    }
}

.sem-resultados {
    text-align: center;
    padding: 20px;
    color: #666;
}

.resultado-item {
    background-color: #fff;
    padding: 20px;
    margin-bottom: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.resultado-numeros {
    margin: 15px 0;
}

.numeros-lista {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin: 10px 0;
}

.numero-sorteado,
.numero-jogado {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    background: #f0f0f0;
    font-weight: bold;
}

.numero-jogado.acerto {
    background: #28a745;
    color: white;
}

.acertos-info,
.premio-info {
    margin: 10px 0;
    font-size: 1.1em;
}

.premio-info {
    color: #28a745;
}
/* Estilo para checkbox dos jogos */
.jogo-checkbox {
    margin-right: 10px;
    width: 18px;
    height: 18px;
    cursor: pointer;
}

/* Atualização no jogo-item para acomodar checkbox */
.jogo-item {
    display: flex;
    align-items: center;
    padding: 12px;
    margin: 8px 0;
    background-color: #f8f9fa;
    border-radius: 6px;
    border: 1px solid #e9ecef;
    transition: all 0.2s ease;
}

.jogo-item:hover {
    background-color: #e9ecef;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Botões de ação para jogos */
.acoes-jogos {
    display: flex;
    gap: 10px;
    margin: 15px 0;
    padding: 10px;
    background-color: #f8f9fa;
    border-radius: 6px;
    justify-content: flex-end;
}

.btn-acao {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
    background-color: #6c757d;
    color: white;
}

.btn-acao:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.btn-acao:not(:disabled):hover {
    opacity: 0.9;
    transform: translateY(-1px);
}

/* Estilo para jogos selecionados */
.jogo-item.selecionado {
    background-color: rgba(0, 135, 81, 0.1);
    border-color: #008751;
}
#contador-jogos {
    font-weight: bold;
    color: var(--primary-color);
}
/*
.valor-premio {
    font-size: 0.9em;
    color: #28a745;
    margin-top: 5px;
    font-weight: bold;
}
*/
.valor-premio {
    font-size: 0.9em;
    color: #666;
    margin-top: 5px;
    font-weight: 500;
}

.premio-info strong {
    color: #28a745;
}

/* Para quando não há ganhadores */
.premio-info strong:only-child {
    color: #666;
}

.btn-cancelar {
    margin-top: 15px;
    padding: 8px 16px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
}

.btn-cancelar:hover {
    background-color: #c82333;
}
.tabela-resumo {
    margin-top: 30px;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.tabela-resumo h2 {
    color: #333;
    margin-bottom: 20px;
    text-align: center;
}

.tabela-container {
    overflow-x: auto;
}

.tabela-premios {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
    font-size: 0.9em;
    min-width: 800px;
    background-color: white;
}

.tabela-premios thead tr {
    background-color: #008751;
    color: white;
    text-align: left;
}

.tabela-premios th,
.tabela-premios td {
    padding: 12px 15px;
    border-bottom: 1px solid #dddddd;
}

.tabela-premios tbody tr:nth-of-type(even) {
    background-color: #f3f3f3;
}

.tabela-premios tbody tr:hover {
    background-color: #f5f5f5;
}

.numeros-tabela {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
}

.numero-tabela {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
}

.numero-tabela.acerto {
    background-color: #28a745;
    color: white;
}
.tabela-premios tfoot {
    background-color: #f8f9fa;
    font-weight: 500;
}

.tabela-premios tfoot td {
    padding: 15px;
    border-top: 2px solid #008751;
}

.total-premios {
    color: #28a745;
    font-weight: bold;
}
/* Estilos para a tabela de jogos mais sorteados */
.jogos-mais-sorteados {
    margin-top: 30px;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.jogos-mais-sorteados h2 {
    color: #333;
    margin-bottom: 20px;
    text-align: center;
}

.distribuicao-badge {
    display: inline-block;
    background-color: #f0f0f0;
    padding: 4px 8px;
    border-radius: 12px;
    margin: 2px;
    font-size: 0.9em;
}


