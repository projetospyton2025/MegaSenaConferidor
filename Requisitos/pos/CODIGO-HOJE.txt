
Estrutura
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        19/01/2025     15:16                Requisitos
d-----        19/01/2025     15:16                static
d-----        24/01/2025     15:06                templates
d-----        19/01/2025     17:02                venv
d-----        22/01/2025     08:23                .vscode
d-----        24/01/2025     15:41                __pycache__
------        24/01/2025     14:40           1075 LICENSE
------        24/01/2025     14:40           3957 MegaSenaConferidor.ps1
------        24/01/2025     14:40           1650 README.md
------        25/01/2025     09:03          18567 app.py
------        25/01/2025     07:52            277 requirements.txt
------        24/01/2025     14:40           1745 setup.ps1
------        25/01/2025     09:05              5 .gitignore
------        25/01/2025     09:12           3120 redis_config.py
------        25/01/2025     09:04            165 .env

# requirements.txt
# flask==2.0.3 novo
flask[async]
Werkzeug==2.0.3
requests==2.26.0
python-dotenv==0.19.0
aiohttp --only-binary=:all: # Para requisições assíncronas novo
asyncio==3.4.3 # Para processar múltiplas requisições novo
redis # novo
pandas # novo
python-dotenv # novo
asyncio # novo



#aiohttp 
#asyncio
#pip install aiohttp
#python -c "import aiohttp, asyncio; print(aiohttp.__version__); print(asyncio.__name__)"


from flask import Flask, render_template, request, jsonify, send_file
from redis_config import redis_config
from datetime import datetime
from dotenv import load_dotenv
import logging
import random
import aiohttp
import asyncio
import json
import pandas as pd
import io
import os

async def fetch_with_retry(session, url, max_retries=3):
    timeout = aiohttp.ClientTimeout(total=30)
    for attempt in range(max_retries):
        try:
            async with session.get(url, timeout=timeout) as response:
                if response.status == 200:
                    return await response.json()
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"Tentativa {attempt + 1} falhou: {str(e)}")
            if attempt == max_retries - 1:
                return None
            await asyncio.sleep(2 ** attempt)
    return None

async def process_concurso(session, concurso, jogos):
    try:
        cached = redis_config.get_cached_result(concurso)
        if cached:
            return cached
            
        resultado = await fetch_with_retry(session, f"{API_BASE_URL}/megasena/{concurso}")
        if resultado:
            redis_config.set_cached_result(concurso, resultado)
        return resultado
    except Exception as e:
        logger.error(f"Erro concurso {concurso}: {e}")
        return None



FLASK_RUN_TIMEOUT = 900  # 15 minutos
CHUNK_SIZE = 1000  # Reduzido de 5000 para 1000
CONCURSOS_PER_BATCH = 930  # Manter atual divisão de concursos
MAX_CONCURRENT_REQUESTS = 5  # Reduzido de 10 para 5

# Configuração de logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("Mega Sena Conferidor")

#ADICIONADO HOJE 26-01-2025
# Carregar variáveis do .env
load_dotenv()


app = Flask(__name__)

API_BASE_URL = "https://loteriascaixa-api.herokuapp.com/api"

async def get_latest_result():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/megasena/latest") as response:
                if response.status == 200:
                    return await response.json()
                return None
    except Exception as e:
        logger.error(f"Erro ao buscar último resultado: {str(e)}")
        return None

@app.route('/')
async def index():
    latest = await get_latest_result()
    ultimo_concurso = latest['concurso'] if latest else 2680
    return render_template('index.html', ultimo_concurso=ultimo_concurso)

@app.route('/gerar_numeros')
async def gerar_numeros():
    numeros = random.sample(range(1, 61), 6)
    return jsonify({'numeros': sorted(numeros)})

@app.route('/processar_arquivo', methods=['POST'])
def processar_arquivo():
    if 'file' not in request.files:
        return jsonify({'error': 'Nenhum arquivo enviado'}), 400
        
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'Nenhum arquivo selecionado'}), 400

    try:
        jogos = []
        logger.info(f"Processando arquivo: {file.filename}")
        
        if file.filename.endswith('.txt'):
            try:
                content = file.read().decode('utf-8-sig')
                for line in content.strip().split('\n'):
                    try:
                        line = ''.join(c for c in line if c.isdigit() or c.isspace())
                        numbers = [int(n) for n in line.strip().split()]
                        if len(numbers) == 6 and all(1 <= n <= 60 for n in numbers) and len(set(numbers)) == 6:
                            jogos.append(sorted(numbers))
                    except Exception as e:
                        logger.error(f"Erro na linha: {str(e)}")
                        continue
            except Exception as e:
                logger.error(f"Erro no TXT: {str(e)}")
                
        elif file.filename.endswith(('.xlsx', '.xls')):
            try:
                df = pd.read_excel(file)
                for _, row in df.iterrows():
                    numbers = []
                    for val in row.values[:6]:
                        try:
                            num = int(float(val))
                            if 1 <= num <= 60:
                                numbers.append(num)
                        except:
                            continue
                    if len(numbers) == 6 and len(set(numbers)) == 6:
                        jogos.append(sorted(numbers))
            except Exception as e:
                logger.error(f"Erro no Excel: {str(e)}")
        else:
            return jsonify({'error': 'Use .txt ou .xlsx'}), 400

        if not jogos:
            return jsonify({'error': 'Nenhum jogo válido encontrado'}), 400

        logger.info(f"Jogos processados: {len(jogos)}")
        return jsonify({'jogos': jogos})

    except Exception as e:
        logger.error(f"Erro geral: {str(e)}")
        return jsonify({'error': f'Erro ao processar arquivo: {str(e)}'}), 500



# @app.route('/conferir', methods=['POST'])
# async def conferir():
#     try:
#         data = request.get_json()
#         inicio = int(data.get('inicio', 1))  # Usa o concurso inicial informado
#         fim = int(data.get('fim', 2680))     # Usa o concurso final informado
#         jogos = data['jogos']
        
#         logger.info(f"Iniciando conferência - Total de jogos: {len(jogos)}")
        
#         # Calcula total de lotes baseado nos concursos informados
#         total_concursos = fim - inicio + 1
#         total_lotes = (total_concursos // 930) + (1 if total_concursos % 930 else 0)
        
#         logger.info(f"Total de lotes a processar: {total_lotes}")
#         logger.info(f"Processando concursos {inicio} até {fim}")
        
#         resultados = {
#             'acertos': [],
#             'resumo': {'quatro': 0, 'cinco': 0, 'seis': 0, 'total_premios': 0}
#         }

#         lote_atual = 1
#         for i in range(inicio, fim + 1, 930):
#             fim_lote = min(i + 929, fim)
#             logger.info(f"Processando lote {lote_atual}/{total_lotes} - Concursos {i} até {fim_lote}")
            
#             async with aiohttp.ClientSession() as session:
#                 for concurso in range(i, fim_lote + 1):
#                     try:
#                         cached = redis_config.get_cached_result(concurso)
#                         if cached:
#                             resultado = cached
#                         else:
#                             async with session.get(f"{API_BASE_URL}/megasena/{concurso}") as response:
#                                 if response.status != 200:
#                                     continue
#                                 resultado = await response.json()
#                                 redis_config.set_cached_result(concurso, resultado)

#                         dezenas = [int(d) for d in resultado['dezenas']]
                        
#                         for jogo in jogos:
#                             acertos = len(set(jogo) & set(dezenas))
#                             if acertos >= 4:
#                                 premio = 0
#                                 for premiacao in resultado['premiacoes']:
#                                     if ((acertos == 6 and premiacao['descricao'] == '6 acertos') or
#                                         (acertos == 5 and premiacao['descricao'] == '5 acertos') or
#                                         (acertos == 4 and premiacao['descricao'] == '4 acertos')):
#                                         premio = float(premiacao['valorPremio'])
#                                         break

#                                 resultados['resumo']['total_premios'] += premio
                                
#                                 if acertos == 4: resultados['resumo']['quatro'] += 1
#                                 elif acertos == 5: resultados['resumo']['cinco'] += 1
#                                 elif acertos == 6: resultados['resumo']['seis'] += 1

#                                 resultados['acertos'].append({
#                                     'concurso': resultado['concurso'],
#                                     'data': resultado['data'],
#                                     'local': resultado.get('local', ''),
#                                     'numeros_sorteados': dezenas,
#                                     'seus_numeros': jogo,
#                                     'acertos': acertos,
#                                     'premio': premio
#                                 })

#                     except Exception as e:
#                         logger.error(f"Erro no concurso {concurso}: {str(e)}")
#                         continue
            
#             lote_atual += 1
#             logger.info(f"Lote {lote_atual-1} concluído")

#         logger.info("Conferência finalizada")
#         return jsonify(resultados)
    
#     except Exception as e:
#         logger.error(f"Erro na conferência: {str(e)}")
#         return jsonify({'error': str(e)}), 500

# @app.route('/conferir', methods=['POST'])
# async def conferir():
#     try:
#         data = request.get_json()
#         inicio = int(data.get('inicio', 1))  # Usa o concurso inicial informado
#         fim = int(data.get('fim', 2680))     # Usa o concurso final informado
#         jogos = data['jogos']

#         # Dividir jogos em chunks
#         chunks = [jogos[i:i + CHUNK_SIZE] for i in range(0, len(jogos), CHUNK_SIZE)]

#         # Inicializa resultados
#         resultados_finais = {
#             'acertos': [],
#             'resumo': {'quatro': 0, 'cinco': 0, 'seis': 0, 'total_premios': 0}
#         }

#         # Calcula total de lotes baseado nos concursos informados
#         total_concursos = fim - inicio + 1
#         total_lotes = (total_concursos // 930) + (1 if total_concursos % 930 else 0)
        
#         logger.info(f"Iniciando conferência - Total de jogos: {len(jogos)}")
#         logger.info(f"Total de lotes a processar: {total_lotes}")
#         logger.info(f"Processando concursos {inicio} até {fim}")
        
#         # Processar cada chunk de jogos
#         for chunk_index, chunk in enumerate(chunks):
#             logger.info(f"Processando chunk {chunk_index + 1}/{len(chunks)}")
            
#             lote_atual = 1
#             # Dividir concursos em lotes
#             for i in range(inicio, fim + 1, 930):
#                 fim_lote = min(i + 929, fim)
#                 logger.info(f"Processando lote {lote_atual}/{total_lotes} - Concursos {i} até {fim_lote}")

#                 async with aiohttp.ClientSession() as session:
#                     for concurso in range(i, fim_lote + 1):
#                         try:
#                             cached = redis_config.get_cached_result(concurso)
#                             if cached:
#                                 resultado = cached
#                             else:
#                                 async with session.get(f"{API_BASE_URL}/megasena/{concurso}") as response:
#                                     if response.status != 200:
#                                         continue
#                                     resultado = await response.json()
#                                     redis_config.set_cached_result(concurso, resultado)

#                             dezenas = [int(d) for d in resultado['dezenas']]
                            
#                             for jogo in chunk:
#                                 acertos = len(set(jogo) & set(dezenas))
#                                 if acertos >= 4:
#                                     premio = 0
#                                     for premiacao in resultado['premiacoes']:
#                                         if ((acertos == 6 and premiacao['descricao'] == '6 acertos') or
#                                             (acertos == 5 and premiacao['descricao'] == '5 acertos') or
#                                             (acertos == 4 and premiacao['descricao'] == '4 acertos')):
#                                             premio = float(premiacao['valorPremio'])
#                                             break

#                                     resultados_finais['resumo']['total_premios'] += premio
                                    
#                                     if acertos == 4: resultados_finais['resumo']['quatro'] += 1
#                                     elif acertos == 5: resultados_finais['resumo']['cinco'] += 1
#                                     elif acertos == 6: resultados_finais['resumo']['seis'] += 1

#                                     resultados_finais['acertos'].append({
#                                         'concurso': resultado['concurso'],
#                                         'data': resultado['data'],
#                                         'local': resultado.get('local', ''),
#                                         'numeros_sorteados': dezenas,
#                                         'seus_numeros': jogo,
#                                         'acertos': acertos,
#                                         'premio': premio
#                                     })

#                         except Exception as e:
#                             logger.error(f"Erro no concurso {concurso}: {str(e)}")
#                             continue

#                 lote_atual += 1
#                 logger.info(f"Lote {lote_atual-1} concluído")

#                 # Cache intermediário
#                 cache_key = f"temp_results:{chunk_index}:{i}"
#                 redis_config.redis_client.setex(
#                     cache_key,
#                     3600,  # 1 hora
#                     json.dumps(resultados_finais)
#                 )

#         logger.info("Conferência finalizada")
#         return jsonify(resultados_finais)

#     except Exception as e:
#         logger.error(f"Erro na conferência: {str(e)}")
#         return jsonify({'error': str(e)}), 500

@app.route('/conferir', methods=['POST'])
async def conferir():
    try:
        data = request.get_json()
        inicio = int(data.get('inicio', 1))
        fim = int(data.get('fim', 2680))
        jogos = data['jogos']

        CHUNK_SIZE = 1000  # Reduzido para melhor gerenciamento
        chunks = [jogos[i:i + CHUNK_SIZE] for i in range(0, len(jogos), CHUNK_SIZE)]
        
        resultados_finais = {
            'acertos': [],
            'resumo': {'quatro': 0, 'cinco': 0, 'seis': 0, 'total_premios': 0}
        }

        timeout = aiohttp.ClientTimeout(total=300)
        
        for chunk_index, chunk in enumerate(chunks):
            logger.info(f"Processando chunk {chunk_index + 1}/{len(chunks)}")
            
            for i in range(inicio, fim + 1, 930):
                fim_lote = min(i + 929, fim)
                logger.info(f"Processando concursos {i} até {fim_lote}")

                async with aiohttp.ClientSession(timeout=timeout) as session:
                    semaphore = asyncio.Semaphore(5)  # Limita a 5 requisições simultâneas
                    tasks = []
                    
                    for concurso in range(i, fim_lote + 1):
                        async with semaphore:
                            async def process_single_concurso():
                                try:
                                    cached = redis_config.get_cached_result(concurso)
                                    if cached:
                                        return cached

                                    for attempt in range(3):
                                        try:
                                            async with session.get(f"{API_BASE_URL}/megasena/{concurso}") as response:
                                                if response.status == 200:
                                                    resultado = await response.json()
                                                    redis_config.set_cached_result(concurso, resultado)
                                                    return resultado
                                        except Exception as e:
                                            if attempt == 2:
                                                logger.error(f"Erro final no concurso {concurso}: {e}")
                                                return None
                                            await asyncio.sleep(2 ** attempt)
                                except Exception as e:
                                    logger.error(f"Erro no concurso {concurso}: {e}")
                                    return None

                            task = asyncio.create_task(process_single_concurso())
                            tasks.append(task)
                    
                    resultados = [r for r in await asyncio.gather(*tasks) if r is not None]
                    
                    for resultado in resultados:
                        dezenas = [int(d) for d in resultado['dezenas']]
                        for jogo in chunk:
                            acertos = len(set(jogo) & set(dezenas))
                            if acertos >= 4:
                                premio = 0
                                for premiacao in resultado['premiacoes']:
                                    if ((acertos == 6 and premiacao['descricao'] == '6 acertos') or
                                        (acertos == 5 and premiacao['descricao'] == '5 acertos') or
                                        (acertos == 4 and premiacao['descricao'] == '4 acertos')):
                                        premio = float(premiacao['valorPremio'])
                                        break

                                resultados_finais['resumo']['total_premios'] += premio
                                resultados_finais['resumo'][f'{acertos}'] += 1

                                resultados_finais['acertos'].append({
                                    'concurso': resultado['concurso'],
                                    'data': resultado['data'],
                                    'local': resultado.get('local', ''),
                                    'numeros_sorteados': dezenas,
                                    'seus_numeros': jogo,
                                    'acertos': acertos,
                                    'premio': premio
                                })

                # Cache intermediário
                cache_key = f"temp_results:{chunk_index}:{i}"
                redis_config.redis_client.setex(
                    cache_key,
                    3600,
                    json.dumps(resultados_finais)
                )

                await asyncio.sleep(1)  # Pequena pausa entre lotes

        return jsonify(resultados_finais)

    except Exception as e:
        logger.error(f"Erro na conferência: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/status')
def get_status():
    if not stats.start_time:
        return jsonify({'status': 'idle'})
        
    return jsonify({
        'status': 'processing',
        'processed_jogos': stats.processed_jogos,
        'processed_concursos': stats.processed_concursos,
        'errors': stats.errors,
        'elapsed_time': time.time() - stats.start_time
    })

"""
if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
"""

# Agora a parte de configuração da porta
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))  # Obtém a porta do ambiente ou usa 5000 como padrão
    app.run(host="0.0.0.0", port=port)  # Inicia o servidor Flask na porta correta

// Variáveis globais
const jogosIncluidos = [];
const jogosSelecionados = new Set();
let conferenciaCancelada = false;
let dadosUltimaConsulta = null;


// Configuração tamanho do lote
const TAMANHO_LOTE = 930;

// Função para atualizar o contador e mensagem
function atualizarContadorJogos() {
    const quantidade = jogosIncluidos.length;
    const contadorElement = document.getElementById('contador-jogos');
    if (contadorElement) {
        contadorElement.textContent = quantidade;
    }

    const tituloJogos = document.querySelector('.jogos-incluidos h3');
    if (tituloJogos) {
        tituloJogos.textContent = `Jogos Incluídos (${quantidade} ${quantidade === 1 ? 'jogo' : 'jogos'})`;
    }
}

// Função para formatar mensagens de jogos
function formatarMensagemJogos(quantidade, acao) {
    if (acao === 'incluir') {
        return `${quantidade} jogo${quantidade === 1 ? ' foi incluído' : 's foram incluídos'} com sucesso!`;
    } else if (acao === 'remover') {
        return `${quantidade} jogo${quantidade === 1 ? ' foi removido' : 's foram removidos'} com sucesso!`;
    }
    return '';
}

async function combinarResultados(resultadosFinais, chunkResultados) {
    // Combina resumo
    resultadosFinais.resumo.quatro += chunkResultados.resumo.quatro;
    resultadosFinais.resumo.cinco += chunkResultados.resumo.cinco;
    resultadosFinais.resumo.seis += chunkResultados.resumo.seis;
    resultadosFinais.resumo.total_premios += chunkResultados.resumo.total_premios;

    // Combina acertos
    resultadosFinais.acertos.push(...chunkResultados.acertos);

    // Atualiza estatísticas dos jogos
    if (chunkResultados.jogos_stats) {
        if (!resultadosFinais.jogos_stats) {
            resultadosFinais.jogos_stats = [];
        }
        chunkResultados.jogos_stats.forEach(jogoStat => {
            const jogoExistente = resultadosFinais.jogos_stats.find(
                js => JSON.stringify(js.numeros) === JSON.stringify(jogoStat.numeros)
            );
            if (jogoExistente) {
                jogoExistente.total += jogoStat.total;
                for (let i = 1; i <= 6; i++) {
                    jogoExistente.distribuicao[i] += jogoStat.distribuicao[i];
                }
            } else {
                resultadosFinais.jogos_stats.push(jogoStat);
            }
        });
    }
}

// Função para calcular os lotes
function calcularLotes(inicio, fim) {
    const lotes = [];
    for (let i = inicio; i <= fim; i += TAMANHO_LOTE) {
        const loteFim = Math.min(i + TAMANHO_LOTE - 1, fim);
        lotes.push({inicio: i, fim: loteFim});
    }
    return lotes;
}

// Funções de Drag and Drop
function setupDragAndDrop() {
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('file-input');
    dropZone.onclick = () => fileInput.click();
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults);
    });
    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, () => {
            dropZone.classList.add('dragover');
        });
    });
    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, () => {
            dropZone.classList.remove('dragover');
        });
    });
    dropZone.addEventListener('drop', handleDrop);
    fileInput.addEventListener('change', handleFileSelect);

    // Adicione aqui o código para seleção dos números
    const numeros = document.querySelectorAll('.numero');
    numeros.forEach(numero => {
        numero.addEventListener('click', () => {
            const num = parseInt(numero.dataset.numero);
            if (numero.classList.contains('selecionado')) {
                numero.classList.remove('selecionado');
                numerosSelecionados.delete(num);
            } else if (numerosSelecionados.size < 6) {
                numero.classList.add('selecionado');
                numerosSelecionados.add(num);
            }
        });
    });
}

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

async function handleDrop(e) {
    const file = e.dataTransfer.files[0];
    await processFile(file);
}

async function handleFileSelect(e) {
    const file = e.target.files[0];
    await processFile(file);
}
async function processFile(file) {
    if (!file) return;

    const dropZone = document.getElementById('drop-zone');
    dropZone.classList.add('processing');

    try {
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('/processar_arquivo', {
            method: 'POST',
            body: formData
        });

        // Verifica status da resposta primeiro
        if (!response.ok) {
            const errorData = await response.text();
            throw new Error(errorData);
        }

        const data = await response.json();
        
        if (data.jogos && data.jogos.length > 0) {
            const jogosAtuais = new Set(jogosIncluidos.map(j => JSON.stringify(j)));
            let jogosNovos = 0;

            data.jogos.forEach(jogo => {
                const jogoStr = JSON.stringify(jogo);
                if (!jogosAtuais.has(jogoStr)) {
                    jogosIncluidos.push(jogo);
                    adicionarJogoNaLista(jogo);
                    jogosAtuais.add(jogoStr);
                    jogosNovos++;
                }
            });

            atualizarContadorJogos();
            alert(formatarMensagemJogos(jogosNovos, 'incluir'));
        } else {
            throw new Error('Nenhum jogo válido encontrado');
        }
    } catch (error) {
        console.error('Erro detalhado:', error);
        alert(`Erro ao processar arquivo: ${error.message}`);
    } finally {
        dropZone.classList.remove('processing');
    }
}

// Funções de manipulação de jogos
function adicionarJogoNaLista(jogo) {
    const jogoItem = document.createElement('div');
    jogoItem.className = 'jogo-item';

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.className = 'jogo-checkbox';
    checkbox.onclick = (e) => {
        const jogoStr = JSON.stringify(jogo);
        if (e.target.checked) {
            jogosSelecionados.add(jogoStr);
            jogoItem.classList.add('selecionado');
        } else {
            jogosSelecionados.delete(jogoStr);
            jogoItem.classList.remove('selecionado');
        }
        atualizarBotoesSeleção();
    };

    const jogoNumeros = document.createElement('div');
    jogoNumeros.className = 'jogo-numeros';

    jogo.forEach(num => {
        const numeroSpan = document.createElement('span');
        numeroSpan.className = 'jogo-numero';
        numeroSpan.textContent = String(num).padStart(2, '0');
        jogoNumeros.appendChild(numeroSpan);
    });

    const btnRemover = document.createElement('button');
    btnRemover.className = 'btn-remover';
    btnRemover.textContent = 'Remover';
    btnRemover.onclick = () => removerJogo(jogo, jogoItem);

    jogoItem.appendChild(checkbox);
    jogoItem.appendChild(jogoNumeros);
    jogoItem.appendChild(btnRemover);
    document.getElementById('lista-jogos').appendChild(jogoItem);
}

function removerJogo(jogo, jogoItem) {
    const index = jogosIncluidos.findIndex(j =>
        JSON.stringify(j) === JSON.stringify(jogo)
    );
    if (index !== -1) {
        jogosIncluidos.splice(index, 1);
        jogosSelecionados.delete(JSON.stringify(jogo));
        jogoItem.remove();
        atualizarBotoesSeleção();
        atualizarContadorJogos();
        alert(formatarMensagemJogos(1, 'remover'));
    }
}

function limparTodosJogos() {
    const quantidadeAtual = jogosIncluidos.length;
    if (quantidadeAtual === 0) {
        alert('Não há jogos para remover');
        return;
    }

    if (confirm('Tem certeza que deseja remover todos os jogos?')) {
        jogosIncluidos.length = 0;
        jogosSelecionados.clear();
        document.getElementById('lista-jogos').innerHTML = '';
        atualizarBotoesSeleção();
        atualizarContadorJogos();
        alert(formatarMensagemJogos(quantidadeAtual, 'remover'));
    }
}

function removerJogosSelecionados() {
    if (jogosSelecionados.size === 0) {
        alert('Selecione pelo menos um jogo para remover');
        return;
    }

    const quantidadeRemover = jogosSelecionados.size;
    if (confirm(`Deseja remover ${quantidadeRemover} jogo${quantidadeRemover === 1 ? '' : 's'} selecionado${quantidadeRemover === 1 ? '' : 's'}?`)) {
        jogosSelecionados.forEach(jogoStr => {
            const jogo = JSON.parse(jogoStr);
            const index = jogosIncluidos.findIndex(j =>
                JSON.stringify(j) === jogoStr
            );
            if (index !== -1) {
                jogosIncluidos.splice(index, 1);
            }
        });

        document.querySelectorAll('.jogo-checkbox:checked').forEach(checkbox => {
            checkbox.closest('.jogo-item').remove();
        });

        jogosSelecionados.clear();
        atualizarBotoesSeleção();
        atualizarContadorJogos();
        alert(formatarMensagemJogos(quantidadeRemover, 'remover'));
    }
}

function atualizarBotoesSeleção() {
    const removerSelecionadosBtn = document.getElementById('btn-remover-selecionados');
    if (removerSelecionadosBtn) {
        removerSelecionadosBtn.disabled = jogosSelecionados.size === 0;
    }
}

// Funções de exportação
function toggleBotoesExportacao(mostrar) {
    document.querySelectorAll('.export-buttons').forEach(div => {
        if (mostrar) {
            div.classList.remove('hidden');
        } else {
            div.classList.add('hidden');
        }
    });
}

async function exportarDados(tipo, formato) {
    if (!dadosUltimaConsulta) {
        alert('Faça uma consulta primeiro antes de exportar os dados.');
        return;
    }

    try {
        const response = await fetch(`/exportar/${tipo}/${formato}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(dadosUltimaConsulta)
        });

        if (!response.ok) {
            throw new Error('Erro ao exportar dados');
        }

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${tipo}.${formato}`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);

    } catch (error) {
        console.error('Erro:', error);
        alert('Erro ao exportar os dados. Tente novamente.');
    }
}

// Funções de atualização de tabelas
function atualizarTabelaJogosSorteados(jogos_stats) {
    const tbody = document.querySelector('#tabela-jogos-sorteados tbody');
    tbody.innerHTML = '';

    jogos_stats.forEach(jogo => {
        const tr = document.createElement('tr');
        
        const tdJogo = document.createElement('td');
        tdJogo.innerHTML = `<div class="numeros-tabela">
            ${jogo.numeros.map(n => 
                `<span class="numero-tabela">${String(n).padStart(2, '0')}</span>`
            ).join('')}
        </div>`;
        
        const tdTotal = document.createElement('td');
        tdTotal.textContent = `${jogo.total} vezes`;
        
        const tdDistribuicao = document.createElement('td');
        const distribuicao = [];
        for (let i = 1; i <= 6; i++) {
            if (jogo.distribuicao[i] > 0) {
                distribuicao.push(
                    `<span class="distribuicao-badge">
                        ${i} ponto${i !== 1 ? 's' : ''}: ${jogo.distribuicao[i]} vez${jogo.distribuicao[i] !== 1 ? 'es' : ''}
                    </span>`
                );
            }
        }
        tdDistribuicao.innerHTML = distribuicao.join(' ');
        
        tr.appendChild(tdJogo);
        tr.appendChild(tdTotal);
        tr.appendChild(tdDistribuicao);
        tbody.appendChild(tr);
    });
}

function atualizarDetalhesETabela(data) {
    const detalhesDiv = document.getElementById('detalhes-resultados');
    const tabelaBody = document.getElementById('tabela-resultados');
    
    detalhesDiv.innerHTML = '';
    tabelaBody.innerHTML = '';

    data.acertos.forEach(resultado => {
        // Adicionar na seção de detalhes
        const resultadoDiv = document.createElement('div');
        resultadoDiv.className = 'resultado-item';
        resultadoDiv.innerHTML = `
            <div class="resultado-header">
                <h3>Concurso ${resultado.concurso} - ${resultado.data}</h3>
                <p>${resultado.local || ''}</p>
            </div>
            <div class="resultado-numeros">
                <div class="numeros-sorteados">
                    <h4>Números Sorteados:</h4>
                    <div class="numeros-lista">
                        ${resultado.numeros_sorteados
                            .sort((a, b) => a - b)
                            .map(n => `<span class="numero-sorteado">${String(n).padStart(2, '0')}</span>`)
                            .join(' ')}
                    </div>
                </div>
                <div class="seu-jogo">
                    <h4>Seu Jogo:</h4>
                    <div class="numeros-lista">
                        ${resultado.seus_numeros
                            .sort((a, b) => a - b)
                            .map(n => `<span class="numero-jogado ${resultado.numeros_sorteados.includes(n) ? 'acerto' : ''}">${String(n).padStart(2, '0')}</span>`)
                            .join(' ')}
                    </div>
                </div>
                <div class="resultado-info">
                    <p class="acertos-info">Acertos: <strong>${resultado.acertos}</strong></p>
                    ${resultado.premio > 0 ? 
                        `<p class="premio-info">Prêmio: <strong>R$ ${resultado.premio.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</strong></p>` 
                        : ''}
                </div>
            </div>
        `;
        detalhesDiv.appendChild(resultadoDiv);

        // Adicionar na tabela
        const row = document.createElement('tr');
        const numerosSorteados = resultado.numeros_sorteados
            .sort((a, b) => a - b)
            .map(n => `<span class="numero-tabela">${String(n).padStart(2, '0')}</span>`)
            .join('');
        const seusNumeros = resultado.seus_numeros
            .sort((a, b) => a - b)
            .map(n => `<span class="numero-tabela ${resultado.numeros_sorteados.includes(n) ? 'acerto' : ''}">${String(n).padStart(2, '0')}</span>`)
            .join('');
        const premioText = resultado.premio > 0 
            ? `R$ ${resultado.premio.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` 
            : 'Não houve ganhadores';

        row.innerHTML = `
            <td>${resultado.concurso}</td>
            <td>${resultado.data}</td>
            <td>${resultado.local || '-'}</td>
            <td><div class="numeros-tabela">${numerosSorteados}</div></td>
            <td><div class="numeros-tabela">${seusNumeros}</div></td>
            <td>${resultado.acertos}</td>
            <td>${premioText}</td>
            <td>${resultado.premio > 0 ? 'Premiado' : 'Acumulado'}</td>
        `;
        tabelaBody.appendChild(row);
    });

    // Atualiza o total no rodapé
    const totalCell = document.querySelector('.total-premios');
    if (totalCell && data.resumo.total_premios) {
        totalCell.textContent = `R$ ${data.resumo.total_premios.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`;
    }
}

// Inicialização do documento
document.addEventListener('DOMContentLoaded', function() {
    setupDragAndDrop();
    const numeros = document.querySelectorAll('.numero');
    const limparBtn = document.getElementById('limpar');
    const sugestaoBtn = document.getElementById('sugestao');
    const conferirBtn = document.getElementById('conferir');
    const incluirBtn = document.getElementById('incluir');
    const listaJogos = document.getElementById('lista-jogos');
    const overlay = document.getElementById('overlay');
    const numerosSelecionados = new Set();

    // Ocultar botões de exportação inicialmente
    toggleBotoesExportacao(false);

    // Configuração do botão de cancelar conferência
    const btnCancelarConferencia = document.getElementById('btn-cancelar-conferencia');
    if (btnCancelarConferencia) {
        btnCancelarConferencia.addEventListener('click', () => {
            conferenciaCancelada = true;
            overlay.style.display = 'none';
        });
    }

    // Configuração dos botões de ação
    document.getElementById('btn-limpar-todos').addEventListener('click', limparTodosJogos);
    document.getElementById('btn-remover-selecionados').addEventListener('click', removerJogosSelecionados);

    // Inicialização
    atualizarContadorJogos();

    // Eventos de seleção de números
    numeros.forEach(numero => {
        numero.addEventListener('click', () => {
            const num = parseInt(numero.dataset.numero);
            if (numero.classList.contains('selecionado')) {
                numero.classList.remove('selecionado');
                numerosSelecionados.delete(num);
            } else if (numerosSelecionados.size < 6) {
                numero.classList.add('selecionado');
                numerosSelecionados.add(num);
            }
        });
    });

    // Botão Limpar
    limparBtn.addEventListener('click', () => {
        numeros.forEach(numero => numero.classList.remove('selecionado'));
        numerosSelecionados.clear();
    });

    // Botão Sugestão
    sugestaoBtn.addEventListener('click', async () => {
        const response = await fetch('/gerar_numeros');
        const data = await response.json();

        limparBtn.click();
        data.numeros.forEach(num => {
            const numero = document.querySelector(`[data-numero="${num}"]`);
            numero.classList.add('selecionado');
            numerosSelecionados.add(num);
        });
    });

    // Botão Incluir
    incluirBtn.addEventListener('click', () => {
        if (numerosSelecionados.size !== 6) {
            alert('Selecione 6 números antes de incluir o jogo!');
            return;
        }

        const numerosArray = Array.from(numerosSelecionados).sort((a, b) => a - b);
        jogosIncluidos.push(numerosArray);
        adicionarJogoNaLista(numerosArray);
        atualizarContadorJogos();
        alert('1 jogo foi incluído com sucesso!');
        limparBtn.click();
    });
// Botão Conferir
conferirBtn.addEventListener('click', async () => {
    if (jogosIncluidos.length === 0) {
        alert('Inclua pelo menos um jogo antes de conferir!');
        return;
    }

    const inicio = parseInt(document.getElementById('inicio').value);
    const fim = parseInt(document.getElementById('fim').value);

    if (!inicio || !fim || inicio > fim) {
        alert('Verifique os números dos concursos!');
        return;
    }

    overlay.style.display = 'flex';
    conferenciaCancelada = false;
    toggleBotoesExportacao(false);

    try {
        const resultadosFinais = {
            acertos: [],
            resumo: { quatro: 0, cinco: 0, seis: 0, total_premios: 0 },
            jogos_stats: []
        };

        // Processa jogos em chunks
        const CHUNK_SIZE = 5000;
        for (let i = 0; i < jogosIncluidos.length && !conferenciaCancelada; i += CHUNK_SIZE) {
            const chunkJogos = jogosIncluidos.slice(i, i + CHUNK_SIZE);
            const progresso = ((i / jogosIncluidos.length) * 100).toFixed(1);
            
            document.querySelector('.progress-text').textContent = 
                `Processando ${progresso}% dos jogos (${i + 1} até ${Math.min(i + CHUNK_SIZE, jogosIncluidos.length)})...`;

            // Processa cada chunk em lotes de concursos
            const lotes = calcularLotes(inicio, fim);
            for (const lote of lotes) {
                if (conferenciaCancelada) break;

                document.querySelector('.progress-text').textContent = 
                    `Processando concursos ${lote.inicio} a ${lote.fim} (${progresso}% dos jogos)...`;

                const response = await fetch('/conferir', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        inicio: lote.inicio,
                        fim: lote.fim,
                        jogos: chunkJogos
                    })
                });

                if (!response.ok) throw new Error('Erro ao processar jogos');
                
                const chunkResultados = await response.json();
                await combinarResultados(resultadosFinais, chunkResultados);
                await atualizarInterfaceProgressiva(resultadosFinais);
            }
        }

        dadosUltimaConsulta = resultadosFinais;
        toggleBotoesExportacao(true);

    } catch (error) {
        console.error('Erro:', error);
        alert('Ocorreu um erro ao processar os jogos. Tente novamente.');
    } finally {
        overlay.style.display = 'none';
    }
});

async function atualizarInterfaceProgressiva(resultados) {
    document.getElementById('quatro-acertos').textContent = resultados.resumo.quatro;
    document.getElementById('cinco-acertos').textContent = resultados.resumo.cinco;
    document.getElementById('seis-acertos').textContent = resultados.resumo.seis;

    const total_premios = resultados.resumo.total_premios;
    const premiosCard = {
        quatro: resultados.acertos.filter(r => r.acertos === 4).reduce((sum, r) => sum + r.premio, 0),
        cinco: resultados.acertos.filter(r => r.acertos === 5).reduce((sum, r) => sum + r.premio, 0),
        seis: resultados.acertos.filter(r => r.acertos === 6).reduce((sum, r) => sum + r.premio, 0)
    };

    document.getElementById('quatro-valor').textContent = premiosCard.quatro > 0 ? 
        `R$ ${premiosCard.quatro.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : 
        'Não houve ganhadores';
    document.getElementById('cinco-valor').textContent = premiosCard.cinco > 0 ? 
        `R$ ${premiosCard.cinco.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : 
        'Não houve ganhadores';
    document.getElementById('seis-valor').textContent = premiosCard.seis > 0 ? 
        `R$ ${premiosCard.seis.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : 
        'Não houve ganhadores';

    if (resultados.acertos && resultados.acertos.length > 0) {
        atualizarDetalhesETabela(resultados);
        toggleBotoesExportacao(true);
    }

    if (resultados.jogos_stats) {
        atualizarTabelaJogosSorteados(resultados.jogos_stats);
    }
};


`Processando concursos ${lote.inicio} a ${lote.fim} (${progresso}% dos jogos)...`;

//ALTERADO 24/01/2025
// Função para calcular lotes
function calcularLotes(inicio, fim) {
    const lotes = [];
    for (let i = inicio; i <= fim; i += TAMANHO_LOTE) {
        const loteFim = Math.min(i + TAMANHO_LOTE - 1, fim);
        lotes.push({inicio: i, fim: loteFim});
    }
    return lotes;
}

});

//ADICIONADO HOJE 26-01-2025
const isProduction = process.env.NODE_ENV === 'production';

if (isProduction) {
  console.log('Running in production mode');
} else {
  console.log('Running in development mode');
}
# processing.py
import asyncio
from typing import List, Dict
import aiohttp

async def process_concurso(session: aiohttp.ClientSession, 
                          concurso: int, 
                          jogos: List[List[int]]) -> Dict:
    try:
        async with session.get(f"{API_BASE_URL}/megasena/{concurso}") as response:
            if response.status != 200:
                return None
            
            resultado = await response.json()
            dezenas = [int(d) for d in resultado['dezenas']]
            
            resultados = {
                'acertos': [],
                'resumo': {'quatro': 0, 'cinco': 0, 'seis': 0, 'total_premios': 0}
            }
            
            for jogo in jogos:
                acertos = len(set(jogo) & set(dezenas))
                if acertos >= 4:
                    # Processar premiações
                    premio = calcular_premio(resultado, acertos)
                    resultados['resumo'][f'{acertos}'] += 1
                    resultados['resumo']['total_premios'] += premio
                    
                    resultados['acertos'].append({
                        'concurso': concurso,
                        'acertos': acertos,  
                        'premio': premio,
                        # ... outros campos
                    })
                    
            return resultados
            
    except Exception as e:
        logger.error(f"Erro processando concurso {concurso}: {e}")
        return None

async def process_batch(jogos: List[List[int]], 
                       inicio: int, 
                       fim: int) -> Dict:
    async with aiohttp.ClientSession() as session:
        tasks = []
        semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)
        
        for concurso in range(inicio, fim + 1):
            async with semaphore:
                task = asyncio.create_task(
                    process_concurso(session, concurso, jogos)
                )
                tasks.append(task)
                
        results = await asyncio.gather(*tasks)
        return combine_results(results)
		
		
import redis
import os
from typing import Optional
import logging
import json
from ast import literal_eval
from dotenv import load_dotenv

# Carrega as variáveis do arquivo .env
load_dotenv()

class RedisConfig:
    def __init__(self):
        self.logger = self._setup_logger()
        self.redis_client = self._initialize_redis()
        self.CACHE_EXPIRATION = 60 * 60 * 24  # 24 horas

    def _setup_logger(self) -> logging.Logger:
        logger = logging.getLogger('RedisConfig')
        logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        return logger

    def _initialize_redis(self) -> Optional[redis.Redis]:
        try:
            redis_url = os.getenv("REDIS_URL")
            if redis_url:  # Prioridade para a URL completa, se definida
                client = redis.from_url(redis_url)
                client.ping()
                self.logger.info("Connected to Redis via URL")
                return client
            else:
                # Conexão usando host, port e senha individuais
                client = redis.Redis(
                    host=os.getenv('REDIS_HOST'),
                    port=int(os.getenv('REDIS_PORT')),
                    password=os.getenv('REDIS_PASSWORD'),
                    db=int(os.getenv('REDIS_DB', 0)),
                    decode_responses=True,
                    socket_timeout=5,
                    retry_on_timeout=True
                )
                client.ping()
                self.logger.info("Connected to Redis via parameters")
                return client
        except Exception as e:
            self.logger.error(f"A conexão com o Redis falhou: {str(e)}")
            return None

    def get_cached_result(self, concurso: int) -> Optional[dict]:
        if not self.redis_client:
            return None

        try:
            cached = self.redis_client.get(f"megasena:{concurso}")
            if not cached:
                return None
            try:
                return json.loads(cached)
            except:
                try:
                    return literal_eval(cached)
                except:
                    return None
        except Exception as e:
            self.logger.error(f"Cache retrieval error for contest {concurso}: {str(e)}")
            return None

    def set_cached_result(self, concurso: int, data: dict) -> bool:
        if not self.redis_client:
            return False

        try:
            serialized = json.dumps(data, ensure_ascii=False)
            self.redis_client.setex(
                f"megasena:{concurso}",
                self.CACHE_EXPIRATION,
                serialized
            )
            return True
        except Exception as e:
            self.logger.error(f"Cache storage error for contest {concurso}: {str(e)}")
            return False

redis_config = RedisConfig()

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MegaSena Conferidor</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Conferidor MegaSena</h1>

        <h1>Informação importante!</h1>
        <h2>Para os Jogos:</h2>
        <ul>
            <li>Você pode carregar quantos jogos quiser (20 mil, 80 mil, 100 mil...)</li>
            <li>Não há limite para quantidade de jogos</li>
            <li>Todos os jogos serão verificados em cada lote</li>
        </ul>
        <h2>Para os Concursos:</h2>
        <ul>
            <li>O sistema agora processa em lotes de 930 concursos</li>
            <li>
                Por exemplo, se você quiser verificar do concurso 1 até o 2816:
                <ul>
                    <li>Lote 1: concursos 1-930</li>
                    <li>Lote 2: concursos 931-1860</li>
                    <li>Lote 3: concursos 1861-2790</li>
                    <li>Lote 4: concursos 2791-2816</li>
                </ul>
            </li>
        </ul>
        <h2>Acumulação de Resultados:</h2>
        <ul>
            <li>O sistema mantém um acumulador que vai somando:</li>
            <ul>
                <li>Quantidade de acertos (quadra, quina, sena)</li>
                <li>Valores dos prêmios</li>
                <li>Todos os jogos premiados</li>
                <li>Estatísticas gerais</li>
            </ul>
        </ul>
        <p>
            <pre>
                NA PRÁTICA...
                Se você tem 50.000 jogos:
                    Lote 1 (1-930): 
                    - Processa os 50.000 jogos
                    - Guarda resultados
                    ↓
                    Lote 2 (931-1860):
                    - Processa os mesmos 50.000 jogos
                    - Soma com resultados anteriores
                    ↓
                    E assim por diante...
            </pre>
            Os lotes sempre serão divididos de 930 à 930, então no <b><u>Concurso Inicial</u></b> adicione o concurso que quiser, selecione o checkbox <b><u>Somente Premiados</u></b>, e aguarde a conferencia.

        </p>

        <div class="volante">
            <h2>Selecione 6 números</h2>
            <div class="numeros">
                {% for i in range(1, 61) %}
                    <button type="button" class="numero" data-numero="{{ i }}">{{ '%02d' % i }}</button>
                {% endfor %}
            </div>
        </div>

        <div class="drop-zone" id="drop-zone">
            <div class="drop-zone-content">
                <p>Arraste e solte seu arquivo aqui ou clique para selecionar</p>
                <p class="drop-zone-hint">Arquivos .txt ou .xlsx</p>
                <input type="file" id="file-input" accept=".txt,.xlsx" hidden>
            </div>
        </div>

        <div class="controles">
            <div class="input-group">
                <label for="inicio">Concurso Inicial:</label>
                <input type="number" id="inicio" min="1">
            </div>
            <div class="input-group">
                <label for="fim">Concurso Final:</label>
                <input type="number" id="fim" min="1" value="{{ ultimo_concurso }}">
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="somente-premiados">
                <label for="somente-premiados">Somente premiados</label>
            </div>
        </div>

        <div class="acoes">
            <button id="incluir" class="btn btn-azul">Incluir Jogo</button>
            <button id="limpar" class="btn btn-vermelho">Limpar</button>
            <button id="sugestao" class="btn btn-roxo">Palpite</button>
            <button id="conferir" class="btn btn-verde">Conferir</button>
        </div>
        <div class="jogos-incluidos">
            <h3>Jogos Incluídos (<span id="contador-jogos">0</span> jogos)</h3>
            <div id="lista-jogos" class="lista-jogos"></div>
        </div>

        <div class="acoes-jogos">
            <button id="btn-remover-selecionados" class="btn-acao" disabled>
                Remover Selecionados
            </button>
            <button id="btn-limpar-todos" class="btn-acao">
                Limpar Todos
            </button>
        </div>

        <div id="overlay" class="overlay" style="display: none;">
            <div class="progress">
                <div class="progress-bar"></div>
                <div class="progress-text">Conferindo jogos...</div>
                <button id="btn-cancelar-conferencia" class="btn-cancelar">Cancelar Conferência</button>
            </div>
        </div>

        <div class="resultados">
            <h2>Resumo de acertos</h2>
            <div class="export-buttons hidden">
                <button onclick="exportarDados('resumo-acertos', 'xlsx')" class="btn-export">
                    <i class="fas fa-file-excel"></i> Excel
                </button>
                <button onclick="exportarDados('resumo-acertos', 'html')" class="btn-export">
                    <i class="fas fa-file-code"></i> HTML
                </button>
            </div>

            <div class="cards">
                <div class="card">
                    <h3>4 Acertos</h3>
                    <p class="contagem" id="quatro-acertos">0</p>
                    <p class="valor-premio" id="quatro-valor">R$ 0,00</p>
                </div>
                <div class="card">
                    <h3>5 Acertos</h3>
                    <p class="contagem" id="cinco-acertos">0</p>
                    <p class="valor-premio" id="cinco-valor">R$ 0,00</p>
                </div>
                <div class="card">
                    <h3>6 Acertos</h3>
                    <p class="contagem" id="seis-acertos">0</p>
                    <p class="valor-premio" id="seis-valor">R$ 0,00</p>
                </div>
            </div>
            <div id="detalhes-resultados" class="detalhes-resultados"></div>

            <div class="tabela-resumo">
                <h2>Resumo dos Jogos Premiados</h2>
                <div class="export-buttons hidden">
                    <button onclick="exportarDados('jogos-premiados', 'xlsx')" class="btn-export">
                        <i class="fas fa-file-excel"></i> Excel
                    </button>
                    <button onclick="exportarDados('jogos-premiados', 'html')" class="btn-export">
                        <i class="fas fa-file-code"></i> HTML
                    </button>
                </div>
                <div class="tabela-container">
                    <table class="tabela-premios">
                        <thead>
                            <tr>
                                <th>Concurso</th>
                                <th>Data</th>
                                <th>Local</th>
                                <th>Números Sorteados</th>
                                <th>Seu Jogo</th>
                                <th>Acertos</th>
                                <th>Prêmio</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="tabela-resultados">
                            <!-- Será preenchido via JavaScript -->
                        </tbody>
                        <tfoot id="tabela-totais">
                            <tr>
                                <td colspan="6"><strong>Total de Prêmios</strong></td>
                                <td colspan="2" class="total-premios"></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>

            <div class="jogos-mais-sorteados">
                <h2>Jogos Mais Sorteados</h2>
                <div class="export-buttons hidden">
                    <button onclick="exportarDados('jogos-sorteados', 'xlsx')" class="btn-export">
                        <i class="fas fa-file-excel"></i> Excel
                    </button>
                    <button onclick="exportarDados('jogos-sorteados', 'html')" class="btn-export">
                        <i class="fas fa-file-code"></i> HTML
                    </button>
                </div>
                <div class="tabela-container">
                    <table class="tabela-premios" id="tabela-jogos-sorteados">
                        <thead>
                            <tr>
                                <th>Meu Jogo</th>
                                <th>Total de Acertos</th>
                                <th>Distribuição</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>
 :root {
    --primary-color: #008751;
    --secondary-color: #005c36;
    --danger-color: #dc3545;
    --success-color: #28a745;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    padding: 20px;
    background-color: #f4f4f4;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    /*text-align: center;*/
}
.volante {
    margin: 20px 0;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
    text-align: center;
}

.volante h2 {
    color: #495057;
    margin-bottom: 20px;
    font-size: 1.2rem;
}

.numeros {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    gap: 8px;
    max-width: 800px;
    margin: 0 auto;
    padding: 15px;
}

.numero {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid #ced4da;
    background-color: white;
    color: #495057;
    font-weight: bold;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    margin: 0 auto;
}

.numero:hover {
    background-color: #e9ecef;
    border-color: #adb5bd;
}

.numero.selecionado {
    background-color: #28a745;
    color: white;
    border-color: #28a745;
}


.drop-zone {
    width: 100%;
    max-width: 800px;
    height: 180px;
    margin: 20px auto;
    padding: 25px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: 1.2em;
    color: #008751;
    border: 3px dashed #008751;
    border-radius: 12px;
    background-color: rgba(0, 135, 81, 0.05);
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.drop-zone:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 135, 81, 0.2);
    background-color: rgba(0, 135, 81, 0.1);
}

.drop-zone.dragover {
    background-color: rgba(40, 167, 69, 0.15);
    border-color: #28a745;
    transform: scale(1.02);
    box-shadow: 0 6px 16px rgba(40, 167, 69, 0.25);
}

.drop-zone.dragover .drop-zone-content {
    transform: scale(1.05);
}

.drop-zone-content {
    transition: transform 0.3s ease;
}

.drop-zone-content p {
    margin: 0;
    color: #008751;
    font-weight: 500;
}

.drop-zone-hint {
    font-size: 0.9em;
    color: #666;
    margin-top: 10px;
    opacity: 0.8;
}

.drop-zone.processing {
    animation: pulse 2s infinite;
    pointer-events: none;
    background-color: rgba(0, 135, 81, 0.1);
}

.drop-zone.processing .drop-zone-content {
    opacity: 0.5;
}

.drop-zone.processing::after {
    content: "Processando...";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-weight: bold;
    color: #008751;
    z-index: 2;
}

.drop-zone::before {
    content: "⬆️";
    font-size: 2em;
    margin-bottom: 10px;
    display: block;
    transition: transform 0.3s ease;
}

.drop-zone.dragover::before {
    transform: scale(1.2) translateY(-5px);
}


.controles {
    display: flex;
    gap: 20px;
    margin: 20px 0;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
    align-items: center;
}

.input-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.input-group label {
    font-weight: bold;
    color: #495057;
}

.input-group input {
    padding: 8px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    width: 120px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    gap: 5px;
}

.acoes {
    display: flex;
    gap: 10px;
    margin: 20px 0;
    justify-content: center;
}

.btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s ease;
}

.btn:hover {
    opacity: 0.9;
    transform: translateY(-1px);
}

.btn-vermelho {
    background-color: var(--danger-color);
    color: white;
}

.btn-azul {
    background-color: #007bff; 
    color: white;
}

.btn-roxo {
    background-color: #6f42c1;
    color: white;
}

.btn-verde {
    background-color: var(--success-color);
    color: white;
}

.cards {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    margin-top: 20px;
}

.card {
    padding: 20px;
    border-radius: 8px;
    background-color: #f8f9fa;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.card h3 {
    color: #495057;
    margin-bottom: 10px;
}

.contagem {
    font-size: 24px;
    font-weight: bold;
    color: var(--primary-color);
}

.lista-jogos {
    margin-top: 20px;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 10px;
    min-height: 100px;
    background-color: #fff;
}

.jogo-item {
    background-color: #f8f9fa;
    padding: 10px;
    margin: 5px 0;
    border-radius: 4px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.jogo-numeros {
    display: flex;
    gap: 5px;
}

.jogo-numero {
    background-color: var(--primary-color);
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: bold;
}

.btn-remover {
    background-color: var(--danger-color);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 12px;
}

.btn-remover:hover {
    opacity: 0.9;
}

.overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(5px);
}

.progress {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    width: 300px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.progress-bar {
    height: 6px;
    background-color: var(--primary-color);
    border-radius: 3px;
    margin: 10px 0;
    position: relative;
    overflow: hidden;
}

.progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.4),
        transparent
    );
    animation: shimmer 1s infinite;
}

.progress-text {
    margin-top: 10px;
    color: #495057;
    font-weight: 500;
}

.detalhes-resultados {
    margin-top: 20px;
}
.export-buttons {
    display: flex;
    gap: 10px;
    margin: 10px 0;
    justify-content: flex-end;
}

.hidden {
    display: none !important;
}

.btn-export {
    background-color: #008751;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: background-color 0.3s;
}

.btn-export:hover {
    background-color: #006b41;
}

.btn-export i {
    font-size: 16px;
}

@keyframes shimmer {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(0, 135, 81, 0.4);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(0, 135, 81, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(0, 135, 81, 0);
    }
}

.sem-resultados {
    text-align: center;
    padding: 20px;
    color: #666;
}

.resultado-item {
    background-color: #fff;
    padding: 20px;
    margin-bottom: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.resultado-numeros {
    margin: 15px 0;
}

.numeros-lista {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin: 10px 0;
}

.numero-sorteado,
.numero-jogado {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    background: #f0f0f0;
    font-weight: bold;
}

.numero-jogado.acerto {
    background: #28a745;
    color: white;
}

.acertos-info,
.premio-info {
    margin: 10px 0;
    font-size: 1.1em;
}

.premio-info {
    color: #28a745;
}

.jogo-checkbox {
    margin-right: 10px;
    width: 18px;
    height: 18px;
    cursor: pointer;
}


.jogo-item {
    display: flex;
    align-items: center;
    padding: 12px;
    margin: 8px 0;
    background-color: #f8f9fa;
    border-radius: 6px;
    border: 1px solid #e9ecef;
    transition: all 0.2s ease;
}

.jogo-item:hover {
    background-color: #e9ecef;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}


.acoes-jogos {
    display: flex;
    gap: 10px;
    margin: 15px 0;
    padding: 10px;
    background-color: #f8f9fa;
    border-radius: 6px;
    justify-content: flex-end;
}

.btn-acao {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
    background-color: #6c757d;
    color: white;
}

.btn-acao:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.btn-acao:not(:disabled):hover {
    opacity: 0.9;
    transform: translateY(-1px);
}


.jogo-item.selecionado {
    background-color: rgba(0, 135, 81, 0.1);
    border-color: #008751;
}
#contador-jogos {
    font-weight: bold;
    color: var(--primary-color);
}

.valor-premio {
    font-size: 0.9em;
    color: #666;
    margin-top: 5px;
    font-weight: 500;
}

.premio-info strong {
    color: #28a745;
}


.premio-info strong:only-child {
    color: #666;
}

.btn-cancelar {
    margin-top: 15px;
    padding: 8px 16px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
}

.btn-cancelar:hover {
    background-color: #c82333;
}
.tabela-resumo {
    margin-top: 30px;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.tabela-resumo h2 {
    color: #333;
    margin-bottom: 20px;
    text-align: center;
}

.tabela-container {
    overflow-x: auto;
}

.tabela-premios {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
    font-size: 0.9em;
    min-width: 800px;
    background-color: white;
}

.tabela-premios thead tr {
    background-color: #008751;
    color: white;
    text-align: left;
}

.tabela-premios th,
.tabela-premios td {
    padding: 12px 15px;
    border-bottom: 1px solid #dddddd;
}

.tabela-premios tbody tr:nth-of-type(even) {
    background-color: #f3f3f3;
}

.tabela-premios tbody tr:hover {
    background-color: #f5f5f5;
}

.numeros-tabela {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
}

.numero-tabela {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
}

.numero-tabela.acerto {
    background-color: #28a745;
    color: white;
}
.tabela-premios tfoot {
    background-color: #f8f9fa;
    font-weight: 500;
}

.tabela-premios tfoot td {
    padding: 15px;
    border-top: 2px solid #008751;
}

.total-premios {
    color: #28a745;
    font-weight: bold;
}

.jogos-mais-sorteados {
    margin-top: 30px;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.jogos-mais-sorteados h2 {
    color: #333;
    margin-bottom: 20px;
    text-align: center;
}

.distribuicao-badge {
    display: inline-block;
    background-color: #f0f0f0;
    padding: 4px 8px;
    border-radius: 12px;
    margin: 2px;
    font-size: 0.9em;
} 
 /* Mantendo as variáveis de cores originais */
:root {
    --primary-color: #008751;
    --secondary-color: #005c36;
    --danger-color: #dc3545;
    --success-color: #28a745;
}

/* Estilos base mantidos... */
/* Adicionando Media Queries para responsividade */

/* Ajustes para tablets e telas menores */
@media screen and (max-width: 1024px) {
    .container {
        padding: 15px;
        margin: 10px;
    }

    .cards {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .numeros {
        grid-template-columns: repeat(8, 1fr);
        gap: 6px;
        padding: 10px;
    }

    .numero {
        width: 35px;
        height: 35px;
        font-size: 14px;
    }

    .controles {
        flex-wrap: wrap;
        gap: 15px;
    }

    .input-group {
        flex: 1;
        min-width: 150px;
    }

    .tabela-premios {
        font-size: 0.85em;
        min-width: 600px;
    }
}

/* Ajustes para smartphones */
@media screen and (max-width: 768px) {
    body {
        padding: 10px;
    }

    .container {
        padding: 10px;
    }

    .volante {
        padding: 10px;
        margin: 10px 0;
    }

    .numeros {
        grid-template-columns: repeat(6, 1fr);
        gap: 5px;
    }

    .numero {
        width: 32px;
        height: 32px;
        font-size: 13px;
    }

    .cards {
        grid-template-columns: 1fr;
        gap: 10px;
    }

    .acoes {
        flex-wrap: wrap;
        gap: 8px;
    }

    .btn {
        flex: 1;
        min-width: 120px;
        font-size: 14px;
        padding: 8px 15px;
    }

    .drop-zone {
        height: 150px;
        padding: 15px;
    }

    .drop-zone-content p {
        font-size: 0.9em;
    }

    .jogo-item {
        flex-wrap: wrap;
        gap: 10px;
    }

    .jogo-numeros {
        order: 2;
        width: 100%;
        justify-content: center;
    }

    .btn-remover {
        order: 3;
        width: 100%;
    }

    .jogo-checkbox {
        order: 1;
    }

    /* Ajustes para tabelas em telas pequenas */
    .tabela-container {
        margin: 0 -10px;
        padding: 0 10px;
    }

    .tabela-premios {
        font-size: 0.8em;
        min-width: 450px;
    }

    .tabela-premios th,
    .tabela-premios td {
        padding: 8px 10px;
    }

    .numero-tabela {
        width: 20px;
        height: 20px;
        font-size: 11px;
    }

    .distribuicao-badge {
        font-size: 0.8em;
        padding: 3px 6px;
    }

    /* Ajustes para os resultados */
    .resultado-item {
        padding: 15px;
    }

    .numero-sorteado,
    .numero-jogado {
        width: 28px;
        height: 28px;
        font-size: 12px;
    }

    /* Ajustes para botões de ação */
    .acoes-jogos {
        flex-direction: column;
        gap: 8px;
    }

    .btn-acao {
        width: 100%;
    }

    /* Overlay e progresso */
    .progress {
        width: 90%;
        max-width: 280px;
    }
}

/* Ajustes para telas muito pequenas */
@media screen and (max-width: 375px) {
    .numeros {
        grid-template-columns: repeat(5, 1fr);
        gap: 4px;
    }

    .numero {
        width: 30px;
        height: 30px;
        font-size: 12px;
    }

    .input-group input {
        width: 100%;
    }

    .controles {
        flex-direction: column;
        align-items: stretch;
    }

    .checkbox-group {
        justify-content: center;
    }

    .tabela-premios {
        min-width: 300px;
        font-size: 0.75em;
    }

    .numeros-tabela {
        gap: 3px;
    }

    .numero-tabela {
        width: 18px;
        height: 18px;
        font-size: 10px;
    }
}

/* Orientação paisagem para dispositivos móveis */
@media screen and (max-width: 768px) and (orientation: landscape) {
    .numeros {
        grid-template-columns: repeat(10, 1fr);
    }

    .cards {
        grid-template-columns: repeat(3, 1fr);
    }

    .volante {
        margin: 10px 0;
    }
}